from timeit import default_timer as timer
import threading
import sys

# mtm means me to move
WIN_SCORE = 50000
MAX_DEPTH = 16
START_DEPTH = 4

childrens = {}  # list of potential moves for a combined board, sorted in terms of bestness for the mover
scores = {}

move_time_limit = 2
move_stop_time = 1.98
move_start_time = 0

prow_scores = {1039: -0.25, 1047: -0.25, 1051: -0.25, 1053: -0.25, 1054: -0.25, 1055: -100000, 2016: 100000, 4103: -0.03125, 4107: -0.03125, 4109: -0.03125, 4110: -0.0625, 4111: -0.25, 4115: -0.03125, 4117: -0.03125, 4118: -0.0625, 4119: -0.25, 4121: -0.03125, 4122: -0.0625, 4123: -0.25, 4124: -0.0625, 4125: -0.25, 4126: -0.5, 4127: -100000, 4134: -0.03125, 4138: -0.03125, 4140: -0.03125, 4142: -0.25, 4146: -0.03125, 4148: -0.03125, 4150: -0.25, 4152: -0.03125, 4154: -0.25, 4156: -0.25, 4158: -100000, 4190: -0.25, 4206: -0.25, 4214: -0.25, 4218: -0.25, 4220: -0.25, 4222: -100000, 5056: 0.037037037037037035, 5568: 0.037037037037037035, 5824: 0.037037037037037035, 5952: 0.037037037037037035, 6016: 0.07407407407407407, 6080: 100000, 6112: 100000, 6159: -0.25, 6167: -0.25, 6171: -0.25, 6173: -0.25, 6174: -0.25, 6175: -100000, 7040: 0.037037037037037035, 7552: 0.037037037037037035, 7808: 0.037037037037037035, 7936: 0.037037037037037035, 8064: 100000, 8065: 100000, 16387: -0.009259259259259259, 16389: -0.009259259259259259, 16390: -0.018518518518518517, 16391: -0.0625, 16393: -0.009259259259259259, 16394: -0.018518518518518517, 16395: -0.0625, 16396: -0.027777777777777776, 16397: -0.0625, 16398: -0.125, 16399: -0.28125, 16401: -0.009259259259259259, 16402: -0.018518518518518517, 16403: -0.0625, 16404: -0.027777777777777776, 16405: -0.0625, 16406: -0.125, 16407: -0.28125, 16408: -0.027777777777777776, 16409: -0.0625, 16410: -0.125, 16411: -0.28125, 16412: -0.1875, 16413: -0.3125, 16414: -0.53125, 16415: -100000, 16418: -0.009259259259259259, 16420: -0.018518518518518517, 16422: -0.0625, 16424: -0.018518518518518517, 16426: -0.0625, 16428: -0.125, 16429: -0.03125, 16430: -0.25, 16432: -0.018518518518518517, 16434: -0.0625, 16436: -0.125, 16437: -0.03125, 16438: -0.25, 16440: -0.125, 16441: -0.03125, 16442: -0.25, 16444: -0.53125, 16445: -0.25, 16446: -100000, 16452: -0.009259259259259259, 16455: -0.03125, 16456: -0.009259259259259259, 16459: -0.03125, 16460: -0.0625, 16461: -0.0625, 16462: -0.03125, 16463: -0.25, 16464: -0.009259259259259259, 16467: -0.03125, 16468: -0.0625, 16469: -0.0625, 16470: -0.03125, 16471: -0.25, 16472: -0.0625, 16473: -0.0625, 16474: -0.03125, 16475: -0.25, 16476: -0.3125, 16477: -0.5, 16478: -0.25, 16479: -100000, 16480: -0.009259259259259259, 16484: -0.0625, 16485: -0.03125, 16488: -0.0625, 16489: -0.03125, 16492: -0.28125, 16493: -0.25, 16496: -0.0625, 16497: -0.03125, 16500: -0.28125, 16501: -0.25, 16504: -0.28125, 16505: -0.25, 16508: -100000, 16509: -100000, 16526: -0.03125, 16534: -0.03125, 16538: -0.03125, 16540: -0.0625, 16542: -0.25, 16550: -0.03125, 16554: -0.03125, 16556: -0.0625, 16558: -0.25, 16562: -0.03125, 16564: -0.0625, 16566: -0.25, 16568: -0.0625, 16570: -0.25, 16572: -0.5, 16574: -100000, 16588: -0.03125, 16596: -0.03125, 16600: -0.03125, 16604: -0.25, 16612: -0.03125, 16616: -0.03125, 16620: -0.25, 16624: -0.03125, 16628: -0.25, 16632: -0.25, 16636: -100000, 16668: -0.03125, 16684: -0.03125, 16692: -0.03125, 16696: -0.03125, 16700: -0.25, 16701: -0.25, 16716: -0.03125, 16724: -0.03125, 16728: -0.03125, 16732: -0.25, 16733: -0.25, 16740: -0.03125, 16744: -0.03125, 16748: -0.25, 16749: -0.25, 16752: -0.03125, 16756: -0.25, 16757: -0.25, 16760: -0.25, 16761: -0.25, 16764: -100000, 16765: -100000, 16828: -0.25, 16860: -0.25, 16876: -0.25, 16884: -0.25, 16888: -0.25, 16892: -100000, 17280: 0.008, 17792: 0.008, 18048: 0.008, 18176: 0.016, 18304: 0.07407407407407407, 18336: 0.037037037037037035, 18368: 0.037037037037037035, 18816: 0.008, 19072: 0.008, 19200: 0.016, 19328: 0.07407407407407407, 19360: 0.037037037037037035, 19392: 0.037037037037037035, 19584: 0.008, 19712: 0.016, 19840: 0.07407407407407407, 19872: 0.037037037037037035, 19904: 0.037037037037037035, 19968: 0.024, 20096: 0.07407407407407407, 20128: 0.037037037037037035, 20160: 0.037037037037037035, 20224: 0.14814814814814814, 20225: 0.037037037037037035, 20256: 0.037037037037037035, 20288: 0.07407407407407407, 20352: 100000, 20384: 100000, 20416: 100000, 20448: 100000, 20487: -0.03125, 20491: -0.03125, 20493: -0.03125, 20494: -0.03125, 20495: -0.25, 20499: -0.03125, 20501: -0.03125, 20502: -0.03125, 20503: -0.25, 20505: -0.03125, 20506: -0.03125, 20507: -0.25, 20508: -0.03125, 20509: -0.25, 20510: -0.25, 20511: -100000, 20559: -0.25, 20567: -0.25, 20571: -0.25, 20573: -0.25, 20574: -0.25, 20575: -100000, 21248: 0.008, 21760: 0.008, 22016: 0.016, 22272: 0.07407407407407407, 22273: 0.037037037037037035, 22336: 0.037037037037037035, 22784: 0.008, 23040: 0.016, 23296: 0.07407407407407407, 23297: 0.037037037037037035, 23360: 0.037037037037037035, 23552: 0.016, 23808: 0.07407407407407407, 23809: 0.037037037037037035, 23872: 0.037037037037037035, 24064: 0.14814814814814814, 24065: 0.07407407407407407, 24066: 0.037037037037037035, 24128: 0.037037037037037035, 24192: 0.037037037037037035, 24320: 100000, 24321: 100000, 24384: 100000, 24385: 100000, 24583: -0.03125, 24587: -0.03125, 24589: -0.03125, 24590: -0.0625, 24591: -0.25, 24595: -0.03125, 24597: -0.03125, 24598: -0.0625, 24599: -0.25, 24601: -0.03125, 24602: -0.0625, 24603: -0.25, 24604: -0.0625, 24605: -0.25, 24606: -0.5, 24607: -100000, 24614: -0.03125, 24618: -0.03125, 24620: -0.03125, 24622: -0.25, 24626: -0.03125, 24628: -0.03125, 24630: -0.25, 24632: -0.03125, 24634: -0.25, 24636: -0.25, 24638: -100000, 24734: -0.25, 24750: -0.25, 24758: -0.25, 24762: -0.25, 24764: -0.25, 24766: -100000, 26112: 0.008, 26496: 0.037037037037037035, 27136: 0.008, 27520: 0.037037037037037035, 27648: 0.008, 28032: 0.037037037037037035, 28160: 0.07407407407407407, 28161: 0.037037037037037035, 28162: 0.037037037037037035, 28288: 0.07407407407407407, 28416: 0.037037037037037035, 28544: 100000, 28576: 100000, 28687: -0.25, 28695: -0.25, 28699: -0.25, 28701: -0.25, 28702: -0.25, 28703: -100000, 29184: 0.008, 29696: 0.008, 30208: 0.07407407407407407, 30209: 0.037037037037037035, 30210: 0.037037037037037035, 30336: 0.037037037037037035, 30720: 0.008, 31232: 0.07407407407407407, 31233: 0.037037037037037035, 31234: 0.037037037037037035, 31360: 0.037037037037037035, 31744: 0.07407407407407407, 31745: 0.037037037037037035, 31746: 0.037037037037037035, 31872: 0.037037037037037035, 32256: 100000, 32257: 100000, 32258: 100000, 32259: 100000, 32384: 100000, 32386: 100000, 65537: -0.00390625, 65538: -0.0078125, 65539: -0.027777777777777776, 65540: -0.01171875, 65541: -0.027777777777777776, 65542: -0.05555555555555555, 65543: -0.11226851851851852, 65544: -0.015625, 65545: -0.027777777777777776, 65546: -0.05555555555555555, 65547: -0.11226851851851852, 65548: -0.08333333333333333, 65549: -0.12152777777777778, 65550: -0.2152777777777778, 65551: -0.375, 65552: -0.015625, 65553: -0.027777777777777776, 65554: -0.05555555555555555, 65555: -0.11226851851851852, 65556: -0.08333333333333333, 65557: -0.12152777777777778, 65558: -0.2152777777777778, 65559: -0.375, 65560: -0.1111111111111111, 65561: -0.13078703703703703, 65562: -0.22453703703703703, 65563: -0.375, 65564: -0.31828703703703703, 65565: -0.4375, 65566: -0.6875, 65567: -100000, 65568: -0.01171875, 65570: -0.027777777777777776, 65572: -0.05555555555555555, 65573: -0.009259259259259259, 65574: -0.10300925925925926, 65576: -0.08333333333333333, 65577: -0.018518518518518517, 65578: -0.11226851851851852, 65580: -0.20601851851851852, 65581: -0.0625, 65582: -0.3125, 65584: -0.08333333333333333, 65585: -0.018518518518518517, 65586: -0.11226851851851852, 65588: -0.20601851851851852, 65589: -0.0625, 65590: -0.3125, 65592: -0.31828703703703703, 65593: -0.125, 65594: -0.375, 65595: -0.03125, 65596: -0.625, 65597: -0.25, 65598: -100000, 65600: -0.0078125, 65603: -0.009259259259259259, 65604: -0.027777777777777776, 65605: -0.018518518518518517, 65606: -0.009259259259259259, 65607: -0.0625, 65608: -0.05555555555555555, 65609: -0.027777777777777776, 65610: -0.018518518518518517, 65611: -0.0625, 65612: -0.11226851851851852, 65613: -0.125, 65614: -0.0625, 65615: -0.28125, 65616: -0.05555555555555555, 65617: -0.027777777777777776, 65618: -0.018518518518518517, 65619: -0.0625, 65620: -0.11226851851851852, 65621: -0.125, 65622: -0.0625, 65623: -0.28125, 65624: -0.22453703703703703, 65625: -0.1875, 65626: -0.125, 65627: -0.3125, 65628: -0.375, 65629: -0.53125, 65630: -0.28125, 65631: -100000, 65632: -0.05555555555555555, 65633: -0.018518518518518517, 65634: -0.009259259259259259, 65636: -0.10300925925925926, 65637: -0.0625, 65640: -0.2152777777777778, 65641: -0.125, 65642: -0.0625, 65643: -0.03125, 65644: -0.3125, 65645: -0.25, 65648: -0.2152777777777778, 65649: -0.125, 65650: -0.0625, 65651: -0.03125, 65652: -0.3125, 65653: -0.25, 65656: -0.6875, 65657: -0.53125, 65658: -0.28125, 65659: -0.25, 65660: -100000, 65661: -100000, 65664: -0.00390625, 65667: -0.009259259259259259, 65669: -0.009259259259259259, 65670: -0.018518518518518517, 65671: -0.0625, 65672: -0.027777777777777776, 65673: -0.018518518518518517, 65674: -0.027777777777777776, 65675: -0.0625, 65676: -0.018518518518518517, 65677: -0.0625, 65678: -0.125, 65679: -0.28125, 65680: -0.027777777777777776, 65681: -0.018518518518518517, 65682: -0.027777777777777776, 65683: -0.0625, 65684: -0.018518518518518517, 65685: -0.0625, 65686: -0.125, 65687: -0.28125, 65688: -0.13078703703703703, 65689: -0.125, 65690: -0.1875, 65691: -0.3125, 65692: -0.125, 65693: -0.28125, 65694: -0.53125, 65695: -100000, 65696: -0.027777777777777776, 65697: -0.009259259259259259, 65698: -0.018518518518518517, 65700: -0.009259259259259259, 65702: -0.0625, 65704: -0.12152777777777778, 65705: -0.0625, 65706: -0.125, 65707: -0.03125, 65708: -0.0625, 65710: -0.25, 65712: -0.12152777777777778, 65713: -0.0625, 65714: -0.125, 65715: -0.03125, 65716: -0.0625, 65718: -0.25, 65720: -0.4375, 65721: -0.28125, 65722: -0.53125, 65723: -0.25, 65724: -0.25, 65726: -100000, 65728: -0.027777777777777776, 65729: -0.009259259259259259, 65730: -0.009259259259259259, 65735: -0.03125, 65736: -0.11226851851851852, 65737: -0.0625, 65738: -0.0625, 65739: -0.0625, 65741: -0.03125, 65742: -0.03125, 65743: -0.25, 65744: -0.11226851851851852, 65745: -0.0625, 65746: -0.0625, 65747: -0.0625, 65749: -0.03125, 65750: -0.03125, 65751: -0.25, 65752: -0.375, 65753: -0.3125, 65754: -0.3125, 65755: -0.5, 65756: -0.03125, 65757: -0.25, 65758: -0.25, 65759: -100000, 65760: -0.11226851851851852, 65761: -0.0625, 65762: -0.0625, 65763: -0.03125, 65768: -0.375, 65769: -0.28125, 65770: -0.28125, 65771: -0.25, 65776: -0.375, 65777: -0.28125, 65778: -0.28125, 65779: -0.25, 65784: -100000, 65785: -100000, 65786: -100000, 65787: -100000, 65798: -0.009259259259259259, 65802: -0.009259259259259259, 65804: -0.018518518518518517, 65806: -0.0625, 65810: -0.009259259259259259, 65812: -0.018518518518518517, 65814: -0.0625, 65816: -0.027777777777777776, 65818: -0.0625, 65820: -0.125, 65822: -0.28125, 65826: -0.009259259259259259, 65828: -0.018518518518518517, 65830: -0.0625, 65832: -0.027777777777777776, 65834: -0.0625, 65836: -0.125, 65838: -0.28125, 65840: -0.027777777777777776, 65842: -0.0625, 65844: -0.125, 65846: -0.28125, 65848: -0.1875, 65850: -0.3125, 65852: -0.53125, 65854: -100000, 65860: -0.009259259259259259, 65864: -0.018518518518518517, 65868: -0.0625, 65872: -0.018518518518518517, 65876: -0.0625, 65880: -0.125, 65882: -0.03125, 65884: -0.25, 65888: -0.018518518518518517, 65892: -0.0625, 65896: -0.125, 65898: -0.03125, 65900: -0.25, 65904: -0.125, 65906: -0.03125, 65908: -0.25, 65912: -0.53125, 65914: -0.25, 65916: -100000, 65928: -0.009259259259259259, 65934: -0.03125, 65936: -0.009259259259259259, 65942: -0.03125, 65944: -0.0625, 65946: -0.0625, 65948: -0.03125, 65950: -0.25, 65952: -0.009259259259259259, 65958: -0.03125, 65960: -0.0625, 65962: -0.0625, 65964: -0.03125, 65966: -0.25, 65968: -0.0625, 65970: -0.0625, 65972: -0.03125, 65974: -0.25, 65976: -0.3125, 65978: -0.5, 65980: -0.25, 65982: -100000, 65984: -0.009259259259259259, 65992: -0.0625, 65994: -0.03125, 66000: -0.0625, 66002: -0.03125, 66008: -0.28125, 66010: -0.25, 66016: -0.0625, 66018: -0.03125, 66024: -0.28125, 66026: -0.25, 66032: -0.28125, 66034: -0.25, 66040: -100000, 66042: -100000, 66060: -0.009259259259259259, 66068: -0.009259259259259259, 66072: -0.018518518518518517, 66076: -0.0625, 66077: -0.03125, 66084: -0.009259259259259259, 66088: -0.018518518518518517, 66092: -0.0625, 66093: -0.03125, 66096: -0.018518518518518517, 66100: -0.0625, 66101: -0.03125, 66104: -0.125, 66105: -0.0625, 66108: -0.28125, 66109: -0.25, 66116: -0.009259259259259259, 66120: -0.018518518518518517, 66124: -0.0625, 66125: -0.03125, 66128: -0.018518518518518517, 66132: -0.0625, 66133: -0.03125, 66136: -0.125, 66137: -0.0625, 66140: -0.28125, 66141: -0.25, 66144: -0.018518518518518517, 66148: -0.0625, 66149: -0.03125, 66152: -0.125, 66153: -0.0625, 66156: -0.28125, 66157: -0.25, 66160: -0.125, 66161: -0.0625, 66164: -0.28125, 66165: -0.25, 66168: -0.5625, 66169: -0.5, 66172: -100000, 66173: -100000, 66184: -0.009259259259259259, 66192: -0.009259259259259259, 66200: -0.0625, 66201: -0.03125, 66208: -0.009259259259259259, 66216: -0.0625, 66217: -0.03125, 66224: -0.0625, 66225: -0.03125, 66232: -0.28125, 66233: -0.25, 66240: -0.009259259259259259, 66248: -0.0625, 66249: -0.03125, 66256: -0.0625, 66257: -0.03125, 66264: -0.28125, 66265: -0.25, 66272: -0.0625, 66273: -0.03125, 66280: -0.28125, 66281: -0.25, 66288: -0.28125, 66289: -0.25, 66296: -100000, 66297: -100000, 66304: 0.0029154518950437317, 66332: -0.03125, 66348: -0.03125, 66356: -0.03125, 66360: -0.0625, 66364: -0.25, 66380: -0.03125, 66388: -0.03125, 66392: -0.0625, 66396: -0.25, 66404: -0.03125, 66408: -0.0625, 66412: -0.25, 66416: -0.0625, 66420: -0.25, 66424: -0.5, 66428: -100000, 66456: -0.03125, 66472: -0.03125, 66480: -0.03125, 66488: -0.25, 66504: -0.03125, 66512: -0.03125, 66520: -0.25, 66528: -0.03125, 66536: -0.25, 66544: -0.25, 66552: -100000, 66584: -0.009259259259259259, 66600: -0.009259259259259259, 66608: -0.009259259259259259, 66616: -0.0625, 66617: -0.03125, 66618: -0.03125, 66632: -0.009259259259259259, 66640: -0.009259259259259259, 66648: -0.0625, 66649: -0.03125, 66650: -0.03125, 66656: -0.009259259259259259, 66664: -0.0625, 66665: -0.03125, 66666: -0.03125, 66672: -0.0625, 66673: -0.03125, 66674: -0.03125, 66680: -0.3125, 66681: -0.25, 66682: -0.25, 66683: -0.25, 66696: -0.009259259259259259, 66704: -0.009259259259259259, 66712: -0.0625, 66713: -0.03125, 66714: -0.03125, 66720: -0.009259259259259259, 66728: -0.0625, 66729: -0.03125, 66730: -0.03125, 66736: -0.0625, 66737: -0.03125, 66738: -0.03125, 66744: -0.3125, 66745: -0.25, 66746: -0.25, 66747: -0.25, 66752: -0.009259259259259259, 66760: -0.0625, 66761: -0.03125, 66762: -0.03125, 66768: -0.0625, 66769: -0.03125, 66770: -0.03125, 66776: -0.3125, 66777: -0.25, 66778: -0.25, 66779: -0.25, 66784: -0.0625, 66785: -0.03125, 66786: -0.03125, 66792: -0.3125, 66793: -0.25, 66794: -0.25, 66795: -0.25, 66800: -0.3125, 66801: -0.25, 66802: -0.25, 66803: -0.25, 66808: -100000, 66809: -100000, 66810: -100000, 66811: -100000, 66816: 0.0029154518950437317, 66872: -0.03125, 66904: -0.03125, 66920: -0.03125, 66928: -0.03125, 66936: -0.25, 66938: -0.25, 66968: -0.03125, 66984: -0.03125, 66992: -0.03125, 67000: -0.25, 67002: -0.25, 67016: -0.03125, 67024: -0.03125, 67032: -0.25, 67034: -0.25, 67040: -0.03125, 67048: -0.25, 67050: -0.25, 67056: -0.25, 67058: -0.25, 67064: -100000, 67066: -100000, 67072: 0.0058309037900874635, 67128: -0.03125, 67160: -0.03125, 67176: -0.03125, 67184: -0.03125, 67192: -0.25, 67193: -0.25, 67224: -0.03125, 67240: -0.03125, 67248: -0.03125, 67256: -0.25, 67257: -0.25, 67272: -0.03125, 67280: -0.03125, 67288: -0.25, 67289: -0.25, 67296: -0.03125, 67304: -0.25, 67305: -0.25, 67312: -0.25, 67313: -0.25, 67320: -100000, 67321: -100000, 67328: 0.024, 67360: 0.008, 67392: 0.008, 67448: -0.25, 67456: 0.008, 67512: -0.25, 67544: -0.25, 67560: -0.25, 67568: -0.25, 67576: -100000, 67840: 0.0029154518950437317, 68096: 0.0058309037900874635, 68352: 0.024, 68384: 0.008, 68416: 0.008, 68480: 0.008, 68608: 0.008746355685131196, 68864: 0.024, 68896: 0.008, 68928: 0.008, 68992: 0.008, 69120: 0.048, 69121: 0.008, 69152: 0.008, 69184: 0.016, 69248: 0.016, 69376: 0.12711111111111112, 69408: 0.07407407407407407, 69440: 0.07407407407407407, 69472: 0.037037037037037035, 69504: 0.07407407407407407, 69536: 0.037037037037037035, 69568: 0.037037037037037035, 69888: 0.0029154518950437317, 70144: 0.0058309037900874635, 70400: 0.024, 70432: 0.008, 70464: 0.008, 70528: 0.008, 70656: 0.008746355685131196, 70912: 0.024, 70944: 0.008, 70976: 0.008, 71040: 0.008, 71168: 0.048, 71169: 0.008, 71200: 0.008, 71232: 0.016, 71296: 0.016, 71424: 0.12711111111111112, 71456: 0.07407407407407407, 71488: 0.07407407407407407, 71520: 0.037037037037037035, 71552: 0.07407407407407407, 71584: 0.037037037037037035, 71616: 0.037037037037037035, 71680: 0.011661807580174927, 71936: 0.024, 71968: 0.008, 72000: 0.008, 72064: 0.008, 72192: 0.048, 72193: 0.008, 72224: 0.008, 72256: 0.016, 72320: 0.016, 72448: 0.12711111111111112, 72480: 0.07407407407407407, 72512: 0.07407407407407407, 72544: 0.037037037037037035, 72576: 0.07407407407407407, 72608: 0.037037037037037035, 72640: 0.037037037037037035, 72704: 0.07200000000000001, 72705: 0.016, 72706: 0.008, 72736: 0.008, 72768: 0.016, 72832: 0.024, 72960: 0.1351111111111111, 72992: 0.07407407407407407, 73024: 0.07407407407407407, 73056: 0.037037037037037035, 73088: 0.07407407407407407, 73120: 0.037037037037037035, 73152: 0.037037037037037035, 73216: 0.24622222222222223, 73217: 0.07407407407407407, 73248: 0.07407407407407407, 73280: 0.14814814814814814, 73281: 0.037037037037037035, 73312: 0.037037037037037035, 73344: 0.14814814814814814, 73345: 0.037037037037037035, 73376: 0.037037037037037035, 73408: 0.07407407407407407, 73472: 100000, 73504: 100000, 73536: 100000, 73568: 100000, 73600: 100000, 73632: 100000, 73664: 100000, 73696: 100000, 73731: -0.009259259259259259, 73733: -0.009259259259259259, 73734: -0.009259259259259259, 73735: -0.0625, 73737: -0.009259259259259259, 73738: -0.009259259259259259, 73739: -0.0625, 73740: -0.009259259259259259, 73741: -0.0625, 73742: -0.0625, 73743: -0.3125, 73745: -0.009259259259259259, 73746: -0.009259259259259259, 73747: -0.0625, 73748: -0.009259259259259259, 73749: -0.0625, 73750: -0.0625, 73751: -0.3125, 73752: -0.009259259259259259, 73753: -0.0625, 73754: -0.0625, 73755: -0.3125, 73756: -0.0625, 73757: -0.3125, 73758: -0.3125, 73759: -100000, 73799: -0.03125, 73803: -0.03125, 73805: -0.03125, 73806: -0.03125, 73807: -0.25, 73811: -0.03125, 73813: -0.03125, 73814: -0.03125, 73815: -0.25, 73817: -0.03125, 73818: -0.03125, 73819: -0.25, 73820: -0.03125, 73821: -0.25, 73822: -0.25, 73823: -100000, 73863: -0.03125, 73867: -0.03125, 73869: -0.03125, 73870: -0.03125, 73871: -0.25, 73875: -0.03125, 73877: -0.03125, 73878: -0.03125, 73879: -0.25, 73881: -0.03125, 73882: -0.03125, 73883: -0.25, 73884: -0.03125, 73885: -0.25, 73886: -0.25, 73887: -100000, 73935: -0.25, 73943: -0.25, 73947: -0.25, 73949: -0.25, 73950: -0.25, 73951: -100000, 74240: 0.0029154518950437317, 74752: 0.0058309037900874635, 75264: 0.024, 75265: 0.008, 75328: 0.008, 75392: 0.008, 75776: 0.008746355685131196, 76288: 0.024, 76289: 0.008, 76352: 0.008, 76416: 0.008, 76800: 0.048, 76801: 0.016, 76802: 0.008, 76864: 0.008, 76928: 0.016, 77056: 0.008, 77312: 0.11911111111111111, 77313: 0.07407407407407407, 77376: 0.07407407407407407, 77377: 0.037037037037037035, 77440: 0.07407407407407407, 77441: 0.037037037037037035, 77504: 0.037037037037037035, 77824: 0.008746355685131196, 78336: 0.024, 78337: 0.008, 78400: 0.008, 78464: 0.008, 78848: 0.048, 78849: 0.016, 78850: 0.008, 78912: 0.008, 78976: 0.016, 79104: 0.008, 79360: 0.11911111111111111, 79361: 0.07407407407407407, 79424: 0.07407407407407407, 79425: 0.037037037037037035, 79488: 0.07407407407407407, 79489: 0.037037037037037035, 79552: 0.037037037037037035, 79872: 0.07200000000000001, 79873: 0.024, 79874: 0.016, 79876: 0.008, 79936: 0.008, 80000: 0.016, 80128: 0.016, 80384: 0.12711111111111112, 80385: 0.07407407407407407, 80448: 0.07407407407407407, 80449: 0.037037037037037035, 80512: 0.07407407407407407, 80513: 0.037037037037037035, 80576: 0.037037037037037035, 80896: 0.23822222222222222, 80897: 0.14814814814814814, 80898: 0.07407407407407407, 80899: 0.037037037037037035, 80960: 0.07407407407407407, 80961: 0.037037037037037035, 81024: 0.14814814814814814, 81025: 0.07407407407407407, 81026: 0.037037037037037035, 81088: 0.037037037037037035, 81152: 0.07407407407407407, 81154: 0.037037037037037035, 81280: 0.037037037037037035, 81408: 100000, 81409: 100000, 81472: 100000, 81473: 100000, 81536: 100000, 81537: 100000, 81600: 100000, 81601: 100000, 81923: -0.009259259259259259, 81925: -0.009259259259259259, 81926: -0.018518518518518517, 81927: -0.0625, 81929: -0.009259259259259259, 81930: -0.018518518518518517, 81931: -0.0625, 81932: -0.018518518518518517, 81933: -0.0625, 81934: -0.125, 81935: -0.28125, 81937: -0.009259259259259259, 81938: -0.018518518518518517, 81939: -0.0625, 81940: -0.018518518518518517, 81941: -0.0625, 81942: -0.125, 81943: -0.28125, 81944: -0.018518518518518517, 81945: -0.0625, 81946: -0.125, 81947: -0.28125, 81948: -0.125, 81949: -0.28125, 81950: -0.5625, 81951: -100000, 81954: -0.009259259259259259, 81956: -0.009259259259259259, 81958: -0.0625, 81960: -0.009259259259259259, 81962: -0.0625, 81964: -0.0625, 81966: -0.28125, 81968: -0.009259259259259259, 81970: -0.0625, 81972: -0.0625, 81974: -0.28125, 81976: -0.0625, 81978: -0.28125, 81980: -0.28125, 81982: -100000, 82055: -0.03125, 82059: -0.03125, 82061: -0.03125, 82062: -0.0625, 82063: -0.25, 82067: -0.03125, 82069: -0.03125, 82070: -0.0625, 82071: -0.25, 82073: -0.03125, 82074: -0.0625, 82075: -0.25, 82076: -0.0625, 82077: -0.25, 82078: -0.5, 82079: -100000, 82086: -0.03125, 82090: -0.03125, 82092: -0.03125, 82094: -0.25, 82098: -0.03125, 82100: -0.03125, 82102: -0.25, 82104: -0.03125, 82106: -0.25, 82108: -0.25, 82110: -100000, 82190: -0.03125, 82198: -0.03125, 82202: -0.03125, 82204: -0.03125, 82206: -0.25, 82214: -0.03125, 82218: -0.03125, 82220: -0.03125, 82222: -0.25, 82226: -0.03125, 82228: -0.03125, 82230: -0.25, 82232: -0.03125, 82234: -0.25, 82236: -0.25, 82238: -100000, 82334: -0.25, 82350: -0.25, 82358: -0.25, 82362: -0.25, 82364: -0.25, 82366: -100000, 82944: 0.0029154518950437317, 83712: 0.008, 83968: 0.0058309037900874635, 84736: 0.008, 84992: 0.024, 84993: 0.008, 84994: 0.008, 85120: 0.008, 85248: 0.016, 85504: 0.008, 85760: 0.07407407407407407, 85792: 0.037037037037037035, 85888: 0.037037037037037035, 86016: 0.0058309037900874635, 86784: 0.008, 87040: 0.024, 87041: 0.008, 87042: 0.008, 87168: 0.008, 87296: 0.016, 87552: 0.008, 87808: 0.07407407407407407, 87840: 0.037037037037037035, 87936: 0.037037037037037035, 88064: 0.048, 88065: 0.016, 88066: 0.016, 88068: 0.008, 88192: 0.008, 88320: 0.024, 88576: 0.016, 88832: 0.07407407407407407, 88864: 0.037037037037037035, 88960: 0.037037037037037035, 89088: 0.12711111111111112, 89089: 0.07407407407407407, 89090: 0.07407407407407407, 89091: 0.037037037037037035, 89216: 0.07407407407407407, 89217: 0.037037037037037035, 89218: 0.037037037037037035, 89344: 0.14814814814814814, 89346: 0.037037037037037035, 89376: 0.037037037037037035, 89472: 0.07407407407407407, 89600: 0.07407407407407407, 89632: 0.037037037037037035, 89728: 0.037037037037037035, 89856: 100000, 89888: 100000, 89984: 100000, 90016: 100000, 90112: 0.0058309037900874635, 90119: -0.03125, 90123: -0.03125, 90125: -0.03125, 90126: -0.03125, 90127: -0.25, 90131: -0.03125, 90133: -0.03125, 90134: -0.03125, 90135: -0.25, 90137: -0.03125, 90138: -0.03125, 90139: -0.25, 90140: -0.03125, 90141: -0.25, 90142: -0.25, 90143: -100000, 90255: -0.25, 90263: -0.25, 90267: -0.25, 90269: -0.25, 90270: -0.25, 90271: -100000, 91136: 0.024, 91137: 0.008, 91138: 0.008, 91264: 0.008, 91392: 0.008, 92160: 0.048, 92161: 0.016, 92162: 0.016, 92164: 0.008, 92288: 0.008, 92416: 0.016, 92672: 0.008, 93184: 0.11911111111111111, 93185: 0.07407407407407407, 93186: 0.07407407407407407, 93187: 0.037037037037037035, 93312: 0.07407407407407407, 93313: 0.037037037037037035, 93314: 0.037037037037037035, 93440: 0.07407407407407407, 93442: 0.037037037037037035, 93568: 0.037037037037037035, 94208: 0.048, 94209: 0.016, 94210: 0.016, 94212: 0.008, 94336: 0.008, 94464: 0.016, 94720: 0.008, 95232: 0.11911111111111111, 95233: 0.07407407407407407, 95234: 0.07407407407407407, 95235: 0.037037037037037035, 95360: 0.07407407407407407, 95361: 0.037037037037037035, 95362: 0.037037037037037035, 95488: 0.07407407407407407, 95490: 0.037037037037037035, 95616: 0.037037037037037035, 96256: 0.24622222222222223, 96257: 0.14814814814814814, 96258: 0.14814814814814814, 96259: 0.07407407407407407, 96260: 0.07407407407407407, 96261: 0.037037037037037035, 96262: 0.037037037037037035, 96384: 0.07407407407407407, 96385: 0.037037037037037035, 96386: 0.037037037037037035, 96512: 0.14814814814814814, 96514: 0.07407407407407407, 96516: 0.037037037037037035, 96640: 0.037037037037037035, 96768: 0.07407407407407407, 96769: 0.037037037037037035, 96772: 0.037037037037037035, 97024: 0.037037037037037035, 97280: 100000, 97281: 100000, 97282: 100000, 97283: 100000, 97408: 100000, 97409: 100000, 97410: 100000, 97411: 100000, 97536: 100000, 97538: 100000, 97664: 100000, 97666: 100000, 98307: -0.009259259259259259, 98309: -0.009259259259259259, 98310: -0.018518518518518517, 98311: -0.0625, 98313: -0.009259259259259259, 98314: -0.018518518518518517, 98315: -0.0625, 98316: -0.027777777777777776, 98317: -0.0625, 98318: -0.125, 98319: -0.28125, 98321: -0.009259259259259259, 98322: -0.018518518518518517, 98323: -0.0625, 98324: -0.027777777777777776, 98325: -0.0625, 98326: -0.125, 98327: -0.28125, 98328: -0.027777777777777776, 98329: -0.0625, 98330: -0.125, 98331: -0.28125, 98332: -0.1875, 98333: -0.3125, 98334: -0.53125, 98335: -100000, 98338: -0.009259259259259259, 98340: -0.018518518518518517, 98342: -0.0625, 98344: -0.018518518518518517, 98346: -0.0625, 98348: -0.125, 98349: -0.03125, 98350: -0.25, 98352: -0.018518518518518517, 98354: -0.0625, 98356: -0.125, 98357: -0.03125, 98358: -0.25, 98360: -0.125, 98361: -0.03125, 98362: -0.25, 98364: -0.53125, 98365: -0.25, 98366: -100000, 98372: -0.009259259259259259, 98375: -0.03125, 98376: -0.009259259259259259, 98379: -0.03125, 98380: -0.0625, 98381: -0.0625, 98382: -0.03125, 98383: -0.25, 98384: -0.009259259259259259, 98387: -0.03125, 98388: -0.0625, 98389: -0.0625, 98390: -0.03125, 98391: -0.25, 98392: -0.0625, 98393: -0.0625, 98394: -0.03125, 98395: -0.25, 98396: -0.3125, 98397: -0.5, 98398: -0.25, 98399: -100000, 98400: -0.009259259259259259, 98404: -0.0625, 98405: -0.03125, 98408: -0.0625, 98409: -0.03125, 98412: -0.28125, 98413: -0.25, 98416: -0.0625, 98417: -0.03125, 98420: -0.28125, 98421: -0.25, 98424: -0.28125, 98425: -0.25, 98428: -100000, 98429: -100000, 98574: -0.03125, 98582: -0.03125, 98586: -0.03125, 98588: -0.0625, 98590: -0.25, 98598: -0.03125, 98602: -0.03125, 98604: -0.0625, 98606: -0.25, 98610: -0.03125, 98612: -0.0625, 98614: -0.25, 98616: -0.0625, 98618: -0.25, 98620: -0.5, 98622: -100000, 98636: -0.03125, 98644: -0.03125, 98648: -0.03125, 98652: -0.25, 98660: -0.03125, 98664: -0.03125, 98668: -0.25, 98672: -0.03125, 98676: -0.25, 98680: -0.25, 98684: -100000, 98844: -0.03125, 98860: -0.03125, 98868: -0.03125, 98872: -0.03125, 98876: -0.25, 98877: -0.25, 98892: -0.03125, 98900: -0.03125, 98904: -0.03125, 98908: -0.25, 98909: -0.25, 98916: -0.03125, 98920: -0.03125, 98924: -0.25, 98925: -0.25, 98928: -0.03125, 98932: -0.25, 98933: -0.25, 98936: -0.25, 98937: -0.25, 98940: -100000, 98941: -100000, 99132: -0.25, 99164: -0.25, 99180: -0.25, 99188: -0.25, 99192: -0.25, 99196: -100000, 100096: 0.008, 100352: 0.0029154518950437317, 101120: 0.008, 101632: 0.008, 101888: 0.016, 102144: 0.07407407407407407, 102176: 0.037037037037037035, 102208: 0.037037037037037035, 102400: 0.0029154518950437317, 103168: 0.008, 103680: 0.008, 103936: 0.016, 104192: 0.07407407407407407, 104224: 0.037037037037037035, 104256: 0.037037037037037035, 104448: 0.024, 104449: 0.008, 104450: 0.008, 104452: 0.008, 104704: 0.016, 104960: 0.024, 105216: 0.07407407407407407, 105248: 0.037037037037037035, 105280: 0.037037037037037035, 105472: 0.016, 105728: 0.07407407407407407, 105760: 0.037037037037037035, 105792: 0.037037037037037035, 105984: 0.14814814814814814, 105985: 0.037037037037037035, 106016: 0.037037037037037035, 106048: 0.07407407407407407, 106240: 100000, 106272: 100000, 106304: 100000, 106336: 100000, 106496: 0.0029154518950437317, 106503: -0.03125, 106507: -0.03125, 106509: -0.03125, 106510: -0.03125, 106511: -0.25, 106515: -0.03125, 106517: -0.03125, 106518: -0.03125, 106519: -0.25, 106521: -0.03125, 106522: -0.03125, 106523: -0.25, 106524: -0.03125, 106525: -0.25, 106526: -0.25, 106527: -100000, 106575: -0.25, 106583: -0.25, 106587: -0.25, 106589: -0.25, 106590: -0.25, 106591: -100000, 108032: 0.008, 108544: 0.024, 108545: 0.008, 108546: 0.008, 108548: 0.008, 108800: 0.008, 109056: 0.016, 109568: 0.008, 110080: 0.07407407407407407, 110081: 0.037037037037037035, 110144: 0.037037037037037035, 110592: 0.024, 110593: 0.008, 110594: 0.008, 110596: 0.008, 110848: 0.008, 111104: 0.016, 111616: 0.008, 112128: 0.07407407407407407, 112129: 0.037037037037037035, 112192: 0.037037037037037035, 112640: 0.1351111111111111, 112641: 0.07407407407407407, 112642: 0.07407407407407407, 112643: 0.037037037037037035, 112644: 0.07407407407407407, 112645: 0.037037037037037035, 112646: 0.037037037037037035, 112896: 0.07407407407407407, 112898: 0.037037037037037035, 112900: 0.037037037037037035, 113152: 0.14814814814814814, 113153: 0.07407407407407407, 113156: 0.037037037037037035, 113216: 0.037037037037037035, 113408: 0.037037037037037035, 113664: 0.07407407407407407, 113665: 0.037037037037037035, 113728: 0.037037037037037035, 114176: 100000, 114177: 100000, 114240: 100000, 114241: 100000, 114688: 0.0029154518950437317, 114695: -0.03125, 114699: -0.03125, 114701: -0.03125, 114702: -0.0625, 114703: -0.25, 114707: -0.03125, 114709: -0.03125, 114710: -0.0625, 114711: -0.25, 114713: -0.03125, 114714: -0.0625, 114715: -0.25, 114716: -0.0625, 114717: -0.25, 114718: -0.5, 114719: -100000, 114726: -0.03125, 114730: -0.03125, 114732: -0.03125, 114734: -0.25, 114738: -0.03125, 114740: -0.03125, 114742: -0.25, 114744: -0.03125, 114746: -0.25, 114748: -0.25, 114750: -100000, 114974: -0.25, 114990: -0.25, 114998: -0.25, 115002: -0.25, 115004: -0.25, 115006: -100000, 116736: 0.024, 116737: 0.008, 116738: 0.008, 116740: 0.008, 116992: 0.008, 117248: 0.008, 118528: 0.037037037037037035, 118784: 0.024, 118785: 0.008, 118786: 0.008, 118788: 0.008, 119040: 0.008, 119296: 0.008, 120576: 0.037037037037037035, 120832: 0.12711111111111112, 120833: 0.07407407407407407, 120834: 0.07407407407407407, 120835: 0.037037037037037035, 120836: 0.07407407407407407, 120837: 0.037037037037037035, 120838: 0.037037037037037035, 121088: 0.07407407407407407, 121090: 0.037037037037037035, 121092: 0.037037037037037035, 121344: 0.07407407407407407, 121345: 0.037037037037037035, 121348: 0.037037037037037035, 121600: 0.07407407407407407, 122112: 0.037037037037037035, 122368: 0.037037037037037035, 122624: 100000, 122656: 100000, 122880: 0.024, 122881: 0.008, 122882: 0.008, 122884: 0.008, 122895: -0.25, 122903: -0.25, 122907: -0.25, 122909: -0.25, 122910: -0.25, 122911: -100000, 123136: 0.008, 123392: 0.008, 124928: 0.12711111111111112, 124929: 0.07407407407407407, 124930: 0.07407407407407407, 124931: 0.037037037037037035, 124932: 0.07407407407407407, 124933: 0.037037037037037035, 124934: 0.037037037037037035, 125184: 0.07407407407407407, 125186: 0.037037037037037035, 125188: 0.037037037037037035, 125440: 0.07407407407407407, 125441: 0.037037037037037035, 125444: 0.037037037037037035, 125696: 0.037037037037037035, 126976: 0.12711111111111112, 126977: 0.07407407407407407, 126978: 0.07407407407407407, 126979: 0.037037037037037035, 126980: 0.07407407407407407, 126981: 0.037037037037037035, 126982: 0.037037037037037035, 127232: 0.07407407407407407, 127234: 0.037037037037037035, 127236: 0.037037037037037035, 127488: 0.07407407407407407, 127489: 0.037037037037037035, 127492: 0.037037037037037035, 127744: 0.037037037037037035, 129024: 100000, 129025: 100000, 129026: 100000, 129027: 100000, 129028: 100000, 129029: 100000, 129030: 100000, 129031: 100000, 129280: 100000, 129282: 100000, 129284: 100000, 129286: 100000, 129536: 100000, 129537: 100000, 129540: 100000, 129541: 100000, 129792: 100000, 129796: 100000}


def count_bits(a):
    return bin(a).count('1')


def board_to_bbs(board, col):
    m_bb = 0x0000000000000000
    o_bb = 0x0000000000000000

    for y in range(len(board)):
        for x in range(len(board[y])):
            if board[y][x] == col:
                m_bb |= 0x01 << x + y * 8
            elif board[y][x] != " ":
                o_bb |= 0x01 << x + y * 8
    return m_bb, o_bb


def board_to_pos(board, col):
    pos = 0x00000000000000000000000000000000

    for y in range(len(board)):
        for x in range(len(board[y])):
            if board[y][x] == col:
                pos |= 0x01 << (x + y * 8) + 64
            elif board[y][x] != " ":
                pos |= 0x01 << (x + y * 8)
    return pos


def bb_to_pos(m_bb, o_bb):
    return (m_bb << 64) | o_bb


def pos_to_m_bb(pos):
    return pos >> 64


def pos_to_o_bb(pos):
    return pos & 0xffffffffffffffff


def pos_to_bb(pos):
    return pos_to_m_bb(pos), pos & pos_to_o_bb(pos)


def pos_to_c_bb(pos):
    return pos_to_m_bb(pos) | pos_to_o_bb(pos)


def is_tie(pos):
    return (pos >> 64 | pos & 0xffffffffffffffff) == 0xffffffffffffffff


def move_to_yx(move):
    i = 0
    while not move & 0x1 and i < 64:
        i += 1
        move = move >> 1
    if i >= 64:
        return 0, 0
    return i_to_yx(i)


def find_move(pos, n_pos):
    return pos_to_c_bb(pos ^ n_pos)


def i_to_yx(i):
    return i >> 3, i & 0x7


def print_bb(bb):
    s = "*"
    for i in range(7):
        s += str(i%10) + "|"
    s += str((7)%10)
    s += "*\n"

    for i in range(8):
        s += str(i%10)
        for j in range(8-1):
            s += ('X' if (1 & bb >> (i*8 + j)) else ' ') + "|"
        s += 'X' if (1 & bb >> (i*8 + 7)) else ' '

        s += "*\n"
    s += (8*2 + 1)*"*"

    print(s)


def yx_to_i(y, x):
    return (y*8 + x)


def yx_to_move(y, x):
    return 1 << yx_to_i(y, x)


def get_i(bb, i):
    return 1 & (bb >> i)


def place_i(bb, i):
    return bb | 1 << i


def pos_place_i(pos, i, mtm):
    return pos | 0x1 << ((i+64) if mtm else i)


def get_prow(m_bb, o_bb, r, angle):
    if angle == 0:
        m_bb = (m_bb >> r*8) & 0xff
        o_bb = (o_bb >> r*8) & 0xff
        return 0x10000 | m_bb << 8 | o_bb
    elif angle == 1:
        m_bb = (m_bb >> r & 0x1) | (m_bb >> r+7 & 0x2) | (m_bb >> r+14 & 0x4) | (m_bb >> r+21 & 0x8) | \
                (m_bb >> r+28 & 0x10) | (m_bb >> r+35 & 0x20) | (m_bb >> r+42 & 0x40) | (m_bb >> r+49 & 0x80) & 0xff
        o_bb = (o_bb >> r & 0x1) | (o_bb >> r+7 & 0x2) | (o_bb >> r+14 & 0x4) | (o_bb >> r+21 & 0x8) | \
                (o_bb >> r+28 & 0x10) | (o_bb >> r+35 & 0x20) | (o_bb >> r+42 & 0x40) | (o_bb >> r+49 & 0x80) & 0xff
        return 0x10000 | m_bb << 8 | o_bb
    elif angle == 2:
        if r == 0:
            m_bb = (m_bb >> 32 & 0x1) | (m_bb >> 24 & 0x2) | (m_bb >> 16 & 0x4) | (m_bb >> 8 & 0x8) | (m_bb & 0x10) & 0x1f
            o_bb = (o_bb >> 32 & 0x1) | (o_bb >> 24 & 0x2) | (o_bb >> 16 & 0x4) | (o_bb >> 8 & 0x8) | (o_bb & 0x10) & 0x1f
            return 0x400 | m_bb << 5 | o_bb
        elif r == 1:
            m_bb = (m_bb >> 40 & 0x1) | (m_bb >> 32 & 0x2) | (m_bb >> 24 & 0x4) | (m_bb >> 16 & 0x8) | (m_bb >> 8 & 0x10) | (m_bb & 0x20) & 0x3f
            o_bb = (o_bb >> 40 & 0x1) | (o_bb >> 32 & 0x2) | (o_bb >> 24 & 0x4) | (o_bb >> 16 & 0x8) | (o_bb >> 8 & 0x10) | (o_bb & 0x20) & 0x3f
            return 0x1000 | m_bb << 6 | o_bb
        elif r == 2:
            m_bb = (m_bb >> 48 & 0x1) | (m_bb >> 40 & 0x2) | (m_bb >> 32 & 0x4) | (m_bb >> 24 & 0x8) | (m_bb >> 16 & 0x10) | (m_bb >> 8 & 0x20) | (m_bb & 0x40) & 0x7f
            o_bb = (o_bb >> 48 & 0x1) | (o_bb >> 40 & 0x2) | (o_bb >> 32 & 0x4) | (o_bb >> 24 & 0x8) | (o_bb >> 16 & 0x10) | (o_bb >> 8 & 0x20) | (o_bb & 0x40) & 0x7f
            return 0x4000 | m_bb << 7 | o_bb
        elif r == 3:
            m_bb = (m_bb >> 56 & 0x1) | (m_bb >> 48 & 0x2) | (m_bb >> 40 & 0x4) | (m_bb >> 32 & 0x8) | (m_bb >> 24 & 0x10) | (m_bb >> 16 & 0x20) | (m_bb >> 8 & 0x40) | (m_bb & 0x80) & 0xff
            o_bb = (o_bb >> 56 & 0x1) | (o_bb >> 48 & 0x2) | (o_bb >> 40 & 0x4) | (o_bb >> 32 & 0x8) | (o_bb >> 24 & 0x10) | (o_bb >> 16 & 0x20) | (o_bb >> 8 & 0x40) | (o_bb & 0x80) & 0xff
            return 0x10000 | m_bb << 8 | o_bb
        elif r == 4:
            m_bb = (m_bb >> 57 & 0x1) | (m_bb >> 47 & 0x2) | (m_bb >> 39 & 0x4) | (m_bb >> 33 & 0x8) | (m_bb >> 25 & 0x10) | (m_bb >> 17 & 0x20) | (m_bb >> 9 & 0x40) & 0x7f
            o_bb = (o_bb >> 57 & 0x1) | (o_bb >> 47 & 0x2) | (o_bb >> 39 & 0x4) | (o_bb >> 33 & 0x8) | (o_bb >> 25 & 0x10) | (o_bb >> 17 & 0x20) | (o_bb >> 9 & 0x40) & 0x7f
            return 0x4000 | m_bb << 7 | o_bb
        elif r == 5:
            m_bb = (m_bb >> 58 & 0x1) | (m_bb >> 50 & 0x2) | (m_bb >> 42 & 0x4) | (m_bb >> 34 & 0x8) | (m_bb >> 26 & 0x10) | (m_bb >> 18 & 0x20) & 0x3f
            o_bb = (o_bb >> 58 & 0x1) | (o_bb >> 50 & 0x2) | (o_bb >> 42 & 0x4) | (o_bb >> 34 & 0x8) | (o_bb >> 26 & 0x10) | (o_bb >> 18 & 0x20) & 0x3f
            return 0x1000 | m_bb << 6 | o_bb
        elif r == 6:
            m_bb = (m_bb >> 57 & 0x1) | (m_bb >> 51 & 0x2) | (m_bb >> 43 & 0x4) | (m_bb >> 35 & 0x8) | (m_bb >> 27 & 0x10) & 0x1f
            o_bb = (o_bb >> 57 & 0x1) | (o_bb >> 51 & 0x2) | (o_bb >> 43 & 0x4) | (o_bb >> 35 & 0x8) | (o_bb >> 27 & 0x10) & 0x1f
            return 0x400 | m_bb << 5 | o_bb
    elif angle == 3:
        if r == 0:
            m_bb = (m_bb >> 3 & 0x1) | (m_bb >> 11 & 0x2) | (m_bb >> 19 & 0x4) | (m_bb >> 27 & 0x8) | (m_bb >> 35 & 0x10) & 0x1f
            o_bb = (o_bb >> 3 & 0x1) | (o_bb >> 11 & 0x2) | (o_bb >> 19 & 0x4) | (o_bb >> 27 & 0x8) | (o_bb >> 35 & 0x10) & 0x1f
            return 0x400 | m_bb << 5 | o_bb
        elif r == 1:
            m_bb = (m_bb >> 2 & 0x1) | (m_bb >> 10 & 0x2) | (m_bb >> 18 & 0x4) | (m_bb >> 26 & 0x8) | (m_bb >> 34 & 0x10) | (m_bb >> 42 & 0x20) & 0x3f
            o_bb = (o_bb >> 2 & 0x1) | (o_bb >> 10 & 0x2) | (o_bb >> 18 & 0x4) | (o_bb >> 26 & 0x8) | (o_bb >> 34 & 0x10) | (o_bb >> 42 & 0x20) & 0x3f
            return 0x1000 | m_bb << 6 | o_bb
        elif r == 2:
            m_bb = (m_bb >> 1 & 0x1) | (m_bb >> 9 & 0x2) | (m_bb >> 17 & 0x4) | (m_bb >> 25 & 0x8) | (m_bb >> 33 & 0x10) | (m_bb >> 41 & 0x20) | (m_bb >> 49 & 0x40) & 0x7f
            o_bb = (o_bb >> 1 & 0x1) | (o_bb >> 9 & 0x2) | (o_bb >> 17 & 0x4) | (o_bb >> 25 & 0x8) | (o_bb >> 33 & 0x10) | (o_bb >> 41 & 0x20) | (o_bb >> 49 & 0x40) & 0x7f
            return 0x4000 | m_bb << 7 | o_bb
        elif r == 3:
            m_bb = (m_bb & 0x1) | (m_bb >> 8 & 0x2) | (m_bb >> 16 & 0x4) | (m_bb >> 24 & 0x8) | (m_bb >> 32 & 0x10) | (m_bb >> 40 & 0x20) | (m_bb >> 48 & 0x40) | (m_bb >> 56 & 0x80) & 0xff
            o_bb = (o_bb & 0x1) | (o_bb >> 8 & 0x2) | (o_bb >> 16 & 0x4) | (o_bb >> 24 & 0x8) | (o_bb >> 32 & 0x10) | (o_bb >> 40 & 0x20) | (o_bb >> 48 & 0x40) | (o_bb >> 56 & 0x80) & 0xff
            return 0x10000 | m_bb << 8 | o_bb
        elif r == 4:
            m_bb = (m_bb >> 8 & 0x1) | (m_bb >> 16 & 0x2) | (m_bb >> 24 & 0x4) | (m_bb >> 32 & 0x8) | (m_bb >> 40 & 0x10) | (m_bb >> 48 & 0x20) | (m_bb >> 56 & 0x40) & 0x7f
            o_bb = (o_bb >> 8 & 0x1) | (o_bb >> 16 & 0x2) | (o_bb >> 24 & 0x4) | (o_bb >> 32 & 0x8) | (o_bb >> 40 & 0x10) | (o_bb >> 48 & 0x20) | (o_bb >> 56 & 0x40) & 0x7f
            return 0x4000 | m_bb << 7 | o_bb
        elif r == 5:
            m_bb = (m_bb >> 16 & 0x1) | (m_bb >> 24 & 0x2) | (m_bb >> 32 & 0x4) | (m_bb >> 40 & 0x8) | (m_bb >> 48 & 0x10) | (m_bb >> 56 & 0x20) & 0x3f
            o_bb = (o_bb >> 16 & 0x1) | (o_bb >> 24 & 0x2) | (o_bb >> 32 & 0x4) | (o_bb >> 40 & 0x8) | (o_bb >> 48 & 0x10) | (o_bb >> 56 & 0x20) & 0x3f
            return 0x1000 | m_bb << 6 | o_bb
        elif r == 6:
            m_bb = (m_bb >> 24 & 0x1) | (m_bb >> 32 & 0x2) | (m_bb >> 40 & 0x4) | (m_bb >> 48 & 0x8) | (m_bb >> 56 & 0x10) & 0x1f
            o_bb = (o_bb >> 24 & 0x1) | (o_bb >> 32 & 0x2) | (o_bb >> 40 & 0x4) | (o_bb >> 48 & 0x8) | (o_bb >> 56 & 0x10) & 0x1f
            return 0x400 | m_bb << 5 | o_bb


def score_prow_i(m_bb, o_bb, i):  # return the score of the rows that include i
    score = 0
    y, x = i_to_yx(i)
    score += prow_scores.get(get_prow(m_bb, o_bb, y, 0), 0)
    score += prow_scores.get(get_prow(m_bb, o_bb, x, 1), 0)
    r = y+x-4
    if -1 < r and r < 7:
        score += prow_scores.get(get_prow(m_bb, o_bb, r, 2), 0)
    r = y-x+3
    if -1 < r and r < 7:
        score += prow_scores.get(get_prow(m_bb, o_bb, r, 3), 0)
    return score


def score_bb(m_bb, o_bb):
    score = 0
    for r in range(8):
        score += prow_scores.get(get_prow(m_bb, o_bb, r, 0), 0)
        score += prow_scores.get(get_prow(m_bb, o_bb, r, 1), 0)
    for r in range(7):
        score += prow_scores.get(get_prow(m_bb, o_bb, r, 2), 0)
        score += prow_scores.get(get_prow(m_bb, o_bb, r, 3), 0)
    return score


def get_relevant(pos):  # returns a board with each position that is within 2 of a piece in a straight line
    c_bb = pos_to_c_bb(pos)
    relevant = ((c_bb << 1 | c_bb << 9 | c_bb >> 7) & -0x101010101010102) | ((c_bb << 2 | c_bb << 18 | c_bb >> 14) & -0x303030303030304) | \
                ((c_bb >> 1 | c_bb >> 9 | c_bb << 7) & -0x8080808080808081) | ((c_bb >> 2 | c_bb >> 18 | c_bb << 14) & -0xc0c0c0c0c0c0c0c1) | \
                (c_bb >> 8 | c_bb >> 16 | c_bb << 8 | c_bb << 16) & 0xffffffffffffffff
    relevant &= ~c_bb
    return relevant


def bib_to_board(w_bib, b_bib):
    board = []
    i = 0
    for y in range(8):
        board.append([' '] * 8)
        for x in range(8):
            if w_bib >> i & 0x1:
                board[y][x] = "w"
            elif b_bib >> i & 0x1:
                board[y][x] = "b"
            i += 1
    return board


def pos_to_board(pos):
    m, o = pos_to_bb(pos)
    return bib_to_board(m, o)


def print_board(board):
    s = "*"
    for i in range(len(board[0])-1):
        s += str(i%10) + "|"
    s += str((len(board[0])-1)%10)
    s += "*\n"

    for i in range(len(board)):
        s += str(i%10)
        for j in range(len(board[0])-1):
            s += str(board[i][j]) + "|"
        s += str(board[i][len(board[0])-1])

        s += "*\n"
    s += (len(board[0])*2 + 1)*"*"

    print(s)


def print_pos(pos):
    get_prow()
    print_board(pos_to_board(pos))


def get_cur_time():
    return timer() - move_start_time


# calculate the minimax of a position, based on previously calculated postion scores
def quick_alphabeta(pos, depth, alpha, beta, me):
    if depth == 0 or pos not in childrens or scores[pos] > WIN_SCORE or scores[pos] < -WIN_SCORE or bb.is_tie(pos):
        return scores[pos]

    if me:
        best = -WIN_SCORE
        for n_pos in childrens[pos]:
            val = quick_alphabeta(n_pos, depth-1, alpha, beta, False)
            best = val if val > best else best
            alpha = best if best > alpha else alpha
            if alpha >= beta:
                return best
        return best
    else:
        best = WIN_SCORE
        for n_pos in childrens[pos]:
            val = quick_alphabeta(n_pos, depth - 1, alpha, beta, True)
            best = val if val < best else best
            beta = best if best < beta else beta
            if beta <= alpha:
                return best
        return best


def get_score(pos):
    if pos not in scores:
        m_bb = pos_to_m_bb(pos)
        o_bb = pos_to_o_bb(pos)
        scores[pos] = score_bb(m_bb, o_bb) - score_bb(o_bb, m_bb)
    return scores[pos]


def do_placement(pos, i, mtm, pos_score, m_bb, o_bb):
    n_pos = pos_place_i(pos, i, mtm)
    if n_pos not in scores:
        n_m_bb = pos_to_m_bb(n_pos)
        n_o_bb = pos_to_o_bb(n_pos)
        pre_prow_score = score_prow_i(m_bb, o_bb, i) - score_prow_i(o_bb, m_bb, i)
        post_prow_score = score_prow_i(n_m_bb, n_o_bb, i) - score_prow_i(n_o_bb, n_m_bb, i)

        scores[n_pos] = pos_score - pre_prow_score + post_prow_score
    return n_pos


def get_children(pos, mtm):  # mtm true if i am moving
    if pos not in childrens:
        relevant = get_relevant(pos)

        pos_score = get_score(pos)
        m_bb = pos_to_m_bb(pos)
        o_bb = pos_to_o_bb(pos)
        children = [do_placement(pos, i, mtm, pos_score, m_bb, o_bb) for i in range(64) if get_i(relevant, i)]
        children.sort(key=lambda c: scores[c], reverse=mtm)
        childrens[pos] = children

    return childrens[pos]


# me is true if finding the best move for me
# me is false if finding the best move for other
def alphabeta(pos, depth, alpha, beta, me, stop_flag):
    if depth == 0 or stop_flag() or get_score(pos) > WIN_SCORE or get_score(pos) < -WIN_SCORE or is_tie(pos):
        return get_score(pos)

    if me:
        best = -WIN_SCORE
        children = get_children(pos, True)[0:8]
        for n_pos in children:
            val = alphabeta(n_pos, depth-1, alpha, beta, False, stop_flag)
            if val > best:
                best = val
            if best > alpha:
                alpha = best
            if alpha >= beta:
                return best
        return best
    else:
        best = WIN_SCORE
        children = get_children(pos, False)[0:8]
        for n_pos in children:
            val = alphabeta(n_pos, depth - 1, alpha, beta, True, stop_flag)
            if val < best:
                best = val
            if best < beta:
                beta = best
            if beta <= alpha:
                return best
        return best


def make_forced_move(board):
    for y in range(8):
        for x in range(8):
            if board[y][x] == ' ':
                return y, x


offtime = True
offtime_pos = 0
offtime_depth = 0


def offtime_computing():
    global offtime_pos, offtime_depth
    while True:
        if offtime and offtime_depth < 9:
            try:
                children = get_children(offtime_pos, False)[0:10]
                for n_pos in children:
                    alphabeta(n_pos, offtime_depth-1, -WIN_SCORE, WIN_SCORE, True, lambda: not offtime)
                offtime_depth += 1
            except KeyError:
                continue


offtime_thread = threading.Thread(target=offtime_computing, daemon=True)
offtime_thread.start()


def move(board, col, **kwargs):
    global move_start_time
    global offtime, offtime_pos, offtime_depth
    global childrens, scores
    offtime = False
    move_start_time = timer()

    head = board_to_pos(board, col)

    if count_bits(pos_to_c_bb(head)) <= 5:
        childrens.clear()
        scores.clear()
        offtime = False

    depth = START_DEPTH
    children = get_children(head, True)[0:10]
    best_poses = {depth: children[0]}
    while get_cur_time() < move_stop_time and depth < MAX_DEPTH:
        best = -WIN_SCORE
        alpha = -WIN_SCORE
        beta = WIN_SCORE
        for n_pos in children:
            val = alphabeta(n_pos, depth-1, alpha, beta, False, lambda: get_cur_time() > move_stop_time)
            if val > best:
                best = val
                best_poses[depth] = n_pos
            best = val if val > best else best
            alpha = best if best > alpha else alpha
            if alpha >= beta:
                break
        if get_cur_time() < move_stop_time and depth in best_poses:
            depth += 1

    best_pos = best_poses[depth-1] if depth > START_DEPTH else best_poses[START_DEPTH]

    move_y, move_x = move_to_yx(find_move(head, best_pos))

    if(board[move_y][move_x] != ' '):  # if we have no move, just play something
        move_y, move_x = make_forced_move(board)

    else:  # start offtime computing
        offtime = True
        offtime_pos = best_pos
        offtime_depth = depth

    if kwargs.get('time', False):
        print("depth:", depth-1, "\ttime:", get_cur_time(), "\tgbytes:", (sys.getsizeof(scores) + sys.getsizeof(childrens)) / 1e9)

    return move_y, move_x


def main():
    import random
    board = []
    for i in range(8):
        board.append([" "]*8)
    for i in range(2):
        board[random.randrange(0, 8)][random.randrange(0, 8)] = 'w'
        board[random.randrange(0, 8)][random.randrange(0, 8)] = 'b'

    #board = pos_to_board(0x2500860002000003000d201000860300)

    print(hex(board_to_pos(board, 'w')))
    print_board(board)
    print(move(board, 'w', time=True))
    #import cProfile
    #cProfile.runctx("print(move(board, 'w', time=True))", globals(), locals())
